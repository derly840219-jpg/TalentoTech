{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMXb8tOxSDHkuRvYF1x7Y+C"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"id":"WJw9cyXm-Fit","executionInfo":{"status":"ok","timestamp":1755828494088,"user_tz":300,"elapsed":6,"user":{"displayName":"DERLY RAMIREZ","userId":"11635856236512875207"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"e8f1ba23"},"source":["# Task\n","Implement a perceptron from scratch to solve a simple 2D binary classification problem. Generate a synthetic dataset, train the perceptron, visualize the decision boundary, and explain the implementation."]},{"cell_type":"markdown","metadata":{"id":"4fe15700"},"source":["## Data generation\n","\n","### Subtask:\n","Generate a simple 2D dataset for binary classification.\n"]},{"cell_type":"markdown","metadata":{"id":"e67c6b09"},"source":["**Reasoning**:\n","Generate a simple 2D dataset for binary classification using `make_blobs` and store the features in `X` and labels in `y`.\n","\n"]},{"cell_type":"code","metadata":{"id":"083dcd3f","executionInfo":{"status":"ok","timestamp":1755828494104,"user_tz":300,"elapsed":13,"user":{"displayName":"DERLY RAMIREZ","userId":"11635856236512875207"}}},"source":["from sklearn.datasets import make_blobs\n","\n","X, y = make_blobs(n_samples=100, n_features=2, centers=2, cluster_std=1.0, random_state=42)"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ccf27b7b"},"source":["## Perceptron implementation\n","\n","### Subtask:\n","Implement the perceptron algorithm from scratch.\n"]},{"cell_type":"markdown","metadata":{"id":"9f142f9e"},"source":["**Reasoning**:\n","Implement the Perceptron class with initialization, forward pass, and update methods as requested in the instructions.\n","\n"]},{"cell_type":"code","metadata":{"id":"8b1b74fb","executionInfo":{"status":"ok","timestamp":1755828494106,"user_tz":300,"elapsed":3,"user":{"displayName":"DERLY RAMIREZ","userId":"11635856236512875207"}}},"source":["import numpy as np\n","\n","class Perceptron:\n","    def __init__(self, num_features, learning_rate=0.01, activation='step'):\n","        self.weights = np.zeros(num_features)\n","        self.bias = 0\n","        self.learning_rate = learning_rate\n","        self.activation = activation\n","\n","    def activate(self, x):\n","        if self.activation == 'step':\n","            return 1 if x > 0 else 0\n","        elif self.activation == 'sigmoid':\n","            return 1 / (1 + np.exp(-x))\n","        elif self.activation == 'relu':\n","            return max(0, x)\n","        else:\n","            raise ValueError(\"Unsupported activation function\")\n","\n","    def predict(self, inputs):\n","        weighted_sum = np.dot(inputs, self.weights) + self.bias\n","        return self.activate(weighted_sum)\n","\n","\n","    def update(self, inputs, target):\n","        prediction = self.predict(inputs)\n","        error = target - prediction\n","        self.weights += self.learning_rate * error * inputs\n","        self.bias += self.learning_rate * error"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5b767af1"},"source":["## Training\n","\n","### Subtask:\n","Train the perceptron on the generated dataset.\n"]},{"cell_type":"markdown","metadata":{"id":"6df40f5e"},"source":["**Reasoning**:\n","Initialize the perceptron and train it on the generated dataset for a fixed number of epochs, updating the weights and bias in each iteration.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5fcd09ee","executionInfo":{"status":"ok","timestamp":1755828494170,"user_tz":300,"elapsed":61,"user":{"displayName":"DERLY RAMIREZ","userId":"11635856236512875207"}},"outputId":"40cebe59-b6ee-4ecb-8c39-29f46ece966e"},"source":["# Initialize the perceptron with a different activation function\n","num_features = X.shape[1]\n","perceptron = Perceptron(num_features=num_features, learning_rate=0.01, activation='relu') # Changed activation to relu\n","\n","# Set the number of epochs\n","epochs = 10\n","\n","# Train the perceptron\n","for epoch in range(epochs):\n","    for inputs, target in zip(X, y):\n","        perceptron.update(inputs, target)\n","\n","# Optionally print the final weights and bias\n","print(\"Final Weights:\", perceptron.weights)\n","print(\"Final Bias:\", perceptron.bias)"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Final Weights: [0.17546767 0.0114826 ]\n","Final Bias: 0.14207874571002316\n"]}]},{"cell_type":"markdown","metadata":{"id":"78089145"},"source":["## Visualization\n","\n","### Subtask:\n","Visualize the decision boundary learned by the perceptron.\n"]},{"cell_type":"markdown","metadata":{"id":"87644109"},"source":["**Reasoning**:\n","Visualize the decision boundary learned by the perceptron by plotting the data points and the decision boundary line.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"f103bffb","executionInfo":{"status":"ok","timestamp":1755828494358,"user_tz":300,"elapsed":231,"user":{"displayName":"DERLY RAMIREZ","userId":"11635856236512875207"}},"outputId":"ed1d58c0-56d3-4552-da13-00deef310737"},"source":["import matplotlib.pyplot as plt\n","\n","# Create a scatter plot of the data\n","plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis')\n","\n","# Define a range of x-values for the decision boundary\n","x_values = np.array([X[:, 0].min(), X[:, 0].max()])\n","\n","# Calculate the corresponding y-values for the decision boundary line\n","# The decision boundary is w1*x1 + w2*x2 + bias = 0\n","# Solving for x2: x2 = (-w1*x1 - bias) / w2\n","\n","# For non-step activation functions, the decision boundary is where the output is 0.5 (for sigmoid)\n","# or some other threshold depending on the activation function.\n","# For simplicity in visualization, we will still plot the line where the weighted sum is 0.\n","# This line represents where the activation function input is zero.\n","if perceptron.weights[1] != 0:\n","    y_values = (-perceptron.weights[0] * x_values - perceptron.bias) / perceptron.weights[1]\n","    plt.plot(x_values, y_values, color='red', linestyle='--', label='Decision Boundary (Weighted Sum = 0)')\n","elif perceptron.weights[0] != 0:\n","    # Handle the case where the weight for the second feature is zero (vertical boundary)\n","    plt.axvline(x=-perceptron.bias / perceptron.weights[0], color='red', linestyle='--', label='Decision Boundary (Weighted Sum = 0)')\n","else:\n","    # Handle the case where both weights are zero (no clear boundary)\n","    print(\"Weights are zero, no clear decision boundary.\")\n","\n","\n","# Add title and labels\n","plt.title(f'Perceptron Decision Boundary with {perceptron.activation.capitalize()} Activation')\n","plt.xlabel('Feature 1')\n","plt.ylabel('Feature 2')\n","plt.legend()\n","plt.grid(True)\n","\n","# Display the plot\n","plt.show()"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"955b46a0"},"source":["## Summary:\n","\n","### Data Analysis Key Findings\n","\n","*   A synthetic 2D dataset with 100 samples and 2 classes was successfully generated using `make_blobs`.\n","*   A perceptron model was implemented from scratch, including methods for initialization, prediction, and weight/bias updates.\n","*   The perceptron was trained on the generated dataset for 10 epochs. The final learned weights were approximately `[ 0.0877651 -0.06098237]` and the bias was `0.0`.\n","*   The decision boundary learned by the trained perceptron was visualized, showing how the model separates the two classes in the 2D feature space.\n","\n","### Insights or Next Steps\n","\n","*   The implementation and visualization confirm that a simple perceptron can learn a linear decision boundary to separate linearly separable data.\n","*   A potential next step could be to evaluate the accuracy of the trained perceptron on a separate test set or to explore the impact of different learning rates and numbers of epochs on the training process and decision boundary.\n"]}]}